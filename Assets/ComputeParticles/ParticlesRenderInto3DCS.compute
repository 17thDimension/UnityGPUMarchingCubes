#pragma kernel CSMain

//RWTexture3D<float4> pixels;
RWStructuredBuffer<float4> pixels : register(u1);
RWStructuredBuffer<float4> posBuffer : register(u0);

float4 g_Params;
int numParticles;



float getPower(float3 testPos, float4 pos){
		//This basically plots a nice curve that is 0.25 at r=0 and 0 at r=_power * 0.707
		float3 d = float3(pos.x - testPos.x, pos.y - testPos.y, pos.z - testPos.z);

		float mSqr = dot(d,d);
		mSqr /= pos.w * pos.w;
		if(mSqr >= 0.5f)
			return 0.0f;
			
		//mSqr /= _power * _power;
		
		if(mSqr < 0.5f ){
			return  (0.25 - mSqr + mSqr*mSqr);
		}
		return 0.0;
	}


[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float p = 0.0;
	float textureSizeScale = g_Params.z;
	int idx = id.x + (id.y * g_Params.y) + (id.z * g_Params.y * g_Params.y);

	float3 testPos = float3(id.x*textureSizeScale,id.y*textureSizeScale,id.z*textureSizeScale);

	for(int i = 0; i < numParticles; ++i){
		float4 particle = float4(posBuffer[i].x,posBuffer[i].y,posBuffer[i].z,	posBuffer[i].w);	
		p += getPower(testPos, particle);
	}

	//Result[id] = p;
	pixels[idx] = float4(p,p,p,1.0);
}
